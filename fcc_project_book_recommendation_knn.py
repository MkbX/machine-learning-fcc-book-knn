# -*- coding: utf-8 -*-
"""fcc_project_book_recommendation_knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TTYoZIBHtGAJfE4JqW3eGMsKXNBU8ls7
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

# add your code here - consider creating a new cell for each section of code

#graph dataset attempt
df_books_graph = df_ratings.groupby("user", as_index=False).size()
graph = df_books_graph.plot.scatter(x='user',y='size')

# users with less than 200 ratings
users_less_200 = df_ratings.groupby("user", as_index=False).size()
#users_less_200
users_less_200_list = users_less_200[users_less_200["size"] < 200]
#users_less_200_list
users_less_200_list = users_less_200_list['user'].values.tolist()
#users_less_200_list

# books with less than 100 ratings
books_less_100 = df_ratings.groupby("isbn", as_index=False).size()
#books_less_100
books_less_100_list = books_less_100[books_less_100["size"] < 100]
#books_less_100_list
books_less_100_list = books_less_100_list['isbn'].values.tolist()
#books_less_100_list

# remove from the dataset users with less than 200 ratings and books with less than 100 ratings
df_ratings_filtered = df_ratings[~df_ratings['user'].isin(users_less_200_list)]
df_ratings_filtered = df_ratings_filtered[~df_ratings_filtered['isbn'].isin(books_less_100_list)]
df_ratings_filtered

# testing dataframe selection
test = "The Queen of the Damned (Vampire Chronicles (Paperback))"
isbn_test = df_books.loc[df_books['title'] == test]['isbn'].values[0]
isbn_test

# pivot dataframe
df_ratings_pivot = df_ratings_filtered.pivot(index='isbn', columns='user', values='rating').fillna(0)
df_ratings_pivot

# testing index row number of isbn
index_isbn = np.where(df_ratings_pivot.index.values == '0345351525')[0][0]
print(index_isbn)
# testing 2D array for KNN
knn_arr = df_ratings_pivot.iloc[index_isbn].values.reshape(1,-1)
knn_arr

# testing retrieve book title
id = df_ratings_pivot.iloc[644].name
df_books[df_books['isbn']==id]

# create compressed sparse row matrix
ratings_matrix = csr_matrix(df_ratings_pivot.values)
ratings_matrix

# KNN model
knn_model = NearestNeighbors(metric='cosine', algorithm='brute')
knn_model.fit(ratings_matrix)
distances, indices = knn_model.kneighbors(df_ratings_pivot.iloc[137].values.reshape(1,-1),n_neighbors=6)
print(indices, distances)

# function to return recommended books - this will be tested
def get_recommends(book = ""):
    recommended_books = []
    recommended_books.append(book)
    temp_list = []
    param_isbn = df_books.loc[df_books['title'] == book]['isbn'].values[0]
    param_index_isbn = np.where(df_ratings_pivot.index.values == param_isbn)[0][0]
    param_distances, param_indices = knn_model.kneighbors(df_ratings_pivot.iloc[param_index_isbn].values.reshape(1,-1),n_neighbors=6)

    for i in reversed(param_indices[0].tolist()):
      temp_list.append(df_books[df_books['isbn']==df_ratings_pivot.iloc[i].name]['title'].values.tolist()[0])
    temp_list.pop()

    reversed_distances = []
    for j in reversed(param_distances[0].tolist()):
        reversed_distances.append(j)
    reversed_distances.pop()

    concat_list = [list(k) for k in zip(temp_list,reversed_distances)]
    #print(temp_list)
    #print(reversed_distances)
    #print(concat_list)
    recommended_books.append(concat_list)      

    return recommended_books

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2): 
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()